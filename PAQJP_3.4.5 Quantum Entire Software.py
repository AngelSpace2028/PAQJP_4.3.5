exec("""\ns='%0*x'\nj='.jpeg'\ni='rb'\nh='wb'\ng=input\nf=bin\ne=str\nc='.txt'\nb='.jpg'\na='utf-8'\nV=False\nU=True\nR=print\nP='1'\nO='0'\nN=min\nM=ValueError\nL=''\nK=max\nJ=open\nH=Exception\nG=bytes\nF=bytearray\nE=int\nD=None\nC=range\nA=len\nimport os as I,sys,math as k,struct,array,random as Q,heapq as W,binascii as S,logging as B,paq,zlib as X,time\nfrom datetime import datetime as Y\nfrom typing import List,Dict,Tuple,Optional,Union\nfrom enum import Enum as l\nfrom mpmath import mp\nB.basicConfig(level=B.INFO,format='%(asctime)s - %(levelname)s - %(message)s')\nA8='PAQJP_4'\nA9=9\nAA=1<<15\nt=1024\nd='pi_digits.txt'\nm=[A for A in C(2,256)if all(A%B!=0 for B in C(2,E(A**.5)+1))]\ndef n(digits,filename=d):\n	D=digits;C=filename\n	try:\n		with J(C,'w')as E:E.write(','.join(e(A)for A in D))\n		B.info(f"Successfully saved {A(D)} base-10 pi digits to {C}");return U\n	except H as F:B.error(f"Failed to save base-10 pi digits to {C}: {F}");return V\ndef u(filename=d,expected_count=3):\n	K=expected_count;C=filename\n	try:\n		if not I.path.isfile(C):B.warning(f"Base-10 pi digits file {C} does not exist");return\n		with J(C,'r')as M:\n			L=M.read().strip()\n			if not L:B.warning(f"Base-10 pi digits file {C} is empty");return\n			D=[]\n			for F in L.split(','):\n				if not F.isdigit():B.warning(f"Invalid integer in {C}: {F}");return\n				G=E(F)\n				if not 0<=G<=255:B.warning(f"Digit out of range in {C}: {G}");return\n				D.append(G)\n			if A(D)!=K:B.warning(f"Loaded {A(D)} digits, expected {K}");return\n			B.info(f"Successfully loaded {A(D)} base-10 pi digits from {C}");return D\n	except H as N:B.error(f"Failed to load base-10 pi digits from {C}: {N}");return\ndef v(num_digits=3,filename=d):\n	G=filename;C=num_digits;J=u(G,C)\n	if J is not D:return J\n	try:\n		mp.dps=C;F=[E(A)for A in mp.pi.digits(10)[0]]\n		if A(F)!=C:B.error(f"Generated {A(F)} digits, expected {C}");raise M('Incorrect number of pi digits generated')\n		if not all(0<=A<=9 for A in F):B.error('Generated pi digits contain invalid values');raise M('Invalid pi digits generated')\n		K=[A*255//9%256 for A in F];n(K,G);return K\n	except H as L:B.error(f"Failed to generate base-10 pi digits: {L}");N=[3,1,4];I=[A*255//9%256 for A in N[:C]];B.warning(f"Using {A(I)} fallback base-10 digits");n(I,G);return I\nw=v(3)\ndef x(filename):\n	A=filename\n	try:C=I.path.getctime(A);return Y.fromtimestamp(C)\n	except H as D:B.error(f"Failed to get creation time for {A}: {D}");return Y.now()\ndef y(filename,dt):\n	A=filename\n	try:C=E(dt.timestamp());I.utime(A,(C,C));B.info(f"Set creation/modification time of {A} to {dt}")\n	except H as D:B.error(f"Failed to set creation time for {A}: {D}")\nclass T(l):DEFAULT=0;JPEG=1;EXE=2;TEXT=3\nclass AB(l):COMPRESS=0;DECOMPRESS=1\nclass AC:\n	def __init__(A,s=L):A.data=F(s.encode(a))\n	def resize(B,new_size):\n		C=new_size\n		if C>A(B.data):B.data+=F(C-A(B.data))\n		else:B.data=B.data[:C]\n	def size(B):return A(B.data)\n	def c_str(A):return A.data.decode(a)\n	def __iadd__(A,s):A.data+=s.encode(a);return A\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __str__(A):return A.data.decode(a)\nclass o:\n	def __init__(A,size=0,initial_value=0):A.data=array.array('B',[initial_value]*size)\n	def resize(B,new_size):\n		C=new_size\n		if C>A(B.data):B.data.extend([0]*(C-A(B.data)))\n		else:B.data=B.data[:C]\n	def size(B):return A(B.data)\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __len__(B):return A(B.data)\nclass z:\n	def __init__(A,size=0):A.size_=size;A.data=o(size);A.pos=0\n	def setsize(B,size):\n		A=size\n		if A>0 and A&A-1==0:B.size_=A;B.data.resize(A)\n	def __getitem__(A,index):return A.data[index&A.size_-1]\n	def __call__(A,i):return A.data[A.pos-i&A.size_-1]\n	def size(A):return A.size_\nAD=z()\nclass p:\n	def __init__(A,left=D,right=D,symbol=D):A.left=left;A.right=right;A.symbol=symbol\n	def is_leaf(A):return A.left is D and A.right is D\nclass A0:\n	def __init__(A):A.table=[[1,2,0,0],[3,5,1,0],[4,6,0,1],[7,10,2,0],[8,12,1,1],[9,13,1,1],[11,14,0,2],[15,19,3,0],[16,23,2,1],[17,24,2,1],[18,25,2,1],[20,27,1,2],[21,28,1,2],[22,29,1,2],[26,30,0,3],[31,33,4,0],[32,35,3,1],[32,35,3,1],[32,35,3,1],[32,35,3,1],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[36,39,1,3],[36,39,1,3],[36,39,1,3],[36,39,1,3],[38,40,0,4],[41,43,5,0],[42,45,4,1],[42,45,4,1],[44,47,3,2],[44,47,3,2],[46,49,2,3],[46,49,2,3],[48,51,1,4],[48,51,1,4],[50,52,0,5],[53,43,6,0],[54,57,5,1],[54,57,5,1],[56,59,4,2],[56,59,4,2],[58,61,3,3],[58,61,3,3],[60,63,2,4],[60,63,2,4],[62,65,1,5],[62,65,1,5],[50,66,0,6],[67,55,7,0],[68,57,6,1],[68,57,6,1],[70,73,5,2],[70,73,5,2],[72,75,4,3],[72,75,4,3],[74,77,3,4],[74,77,3,4],[76,79,2,5],[76,79,2,5],[62,81,1,6],[62,81,1,6],[64,82,0,7],[83,69,8,0],[84,76,7,1],[84,76,7,1],[86,73,6,2],[86,73,6,2],[44,59,5,3],[44,59,5,3],[58,61,4,4],[58,61,4,4],[60,49,3,5],[60,49,3,5],[76,89,2,6],[76,89,2,6],[78,91,1,7],[78,91,1,7],[80,92,0,8],[93,69,9,0],[94,87,8,1],[94,87,8,1],[96,45,7,2],[96,45,7,2],[48,99,2,7],[48,99,2,7],[88,101,1,8],[88,101,1,8],[80,102,0,9],[103,69,10,0],[104,87,9,1],[104,87,9,1],[106,57,8,2],[106,57,8,2],[62,109,2,8],[62,109,2,8],[88,111,1,9],[88,111,1,9],[80,112,0,10],[113,85,11,0],[114,87,10,1],[114,87,10,1],[116,57,9,2],[116,57,9,2],[62,119,2,9],[62,119,2,9],[88,121,1,10],[88,121,1,10],[90,122,0,11],[123,85,12,0],[124,97,11,1],[124,97,11,1],[126,57,10,2],[126,57,10,2],[62,129,2,10],[62,129,2,10],[98,131,1,11],[98,131,1,11],[90,132,0,12],[133,85,13,0],[134,97,12,1],[134,97,12,1],[136,57,11,2],[136,57,11,2],[62,139,2,11],[62,139,2,11],[98,141,1,12],[98,141,1,12],[90,142,0,13],[143,95,14,0],[144,97,13,1],[144,97,13,1],[68,57,12,2],[68,57,12,2],[62,81,2,12],[62,81,2,12],[98,147,1,13],[98,147,1,13],[100,148,0,14],[149,95,15,0],[150,107,14,1],[150,107,14,1],[108,151,1,14],[108,151,1,14],[100,152,0,15],[153,95,16,0],[154,107,15,1],[108,155,1,15],[100,156,0,16],[157,95,17,0],[158,107,16,1],[108,159,1,16],[100,160,0,17],[161,105,18,0],[162,107,17,1],[108,163,1,17],[110,164,0,18],[165,105,19,0],[166,117,18,1],[118,167,1,18],[110,168,0,19],[169,105,20,0],[170,117,19,1],[118,171,1,19],[110,172,0,20],[173,105,21,0],[174,117,20,1],[118,175,1,20],[110,176,0,21],[177,105,22,0],[178,117,21,1],[118,179,1,21],[120,184,0,23],[185,115,24,0],[186,127,23,1],[128,187,1,23],[120,188,0,24],[189,115,25,0],[190,127,24,1],[128,191,1,24],[120,192,0,25],[193,115,26,0],[194,127,25,1],[128,195,1,25],[120,196,0,26],[197,115,27,0],[198,127,26,1],[128,199,1,26],[120,200,0,27],[201,115,28,0],[202,127,27,1],[128,203,1,27],[120,204,0,28],[205,115,29,0],[206,127,28,1],[128,207,1,28],[120,208,0,29],[209,125,30,0],[210,127,29,1],[128,211,1,29],[130,212,0,30],[213,125,31,0],[214,137,30,1],[138,215,1,30],[130,216,0,31],[217,125,32,0],[218,137,31,1],[138,219,1,31],[130,220,0,32],[221,125,33,0],[222,137,32,1],[138,223,1,32],[130,224,0,33],[225,125,34,0],[226,137,33,1],[138,227,1,33],[130,228,0,34],[229,125,35,0],[230,137,34,1],[138,231,1,34],[130,232,0,35],[233,125,36,0],[234,137,35,1],[138,235,1,35],[130,236,0,36],[237,125,37,0],[238,137,36,1],[138,239,1,36],[130,240,0,37],[241,125,38,0],[242,137,37,1],[138,243,1,37],[130,244,0,38],[245,135,39,0],[246,137,38,1],[138,247,1,38],[140,248,0,39],[249,135,40,0],[250,69,39,1],[80,251,1,39],[140,252,0,40],[249,135,41,0],[250,69,40,1],[80,251,1,40],[140,252,0,41]]\n	def nex(A,state,sel):return A.table[state][sel]\nAE=A0()\ndef A1(dt=D):\n	A=dt\n	if A is D:A=Y.now()\n	J=A.second;K=A.minute;L=A.hour;N=A.weekday();H=A.month;O=A.day;I=A.year;E=0\n	if not(0<=J<=59 and 0<=K<=59 and 0<=L<=23 and 0<=N<=6 and 1<=H<=12 and 1<=O<=31 and 0<=I<=4095 and 0<=E<=127):B.error('Invalid date/time values for encoding');raise M('Date/time values out of range')\n	C=F(6);C[0]=J&63|(E&3)<<6;C[1]=K&63|(E>>2&3)<<6;C[2]=L&31|(H&7)<<5;C[3]=H>>3&1|(O&31)<<1|(E>>4&3)<<6;C[4]=N&7|(I&31)<<3;C[5]=I>>5&127|(E>>6&1)<<7;return G(C)\ndef q(data):\n	L='Decoded date/time values out of range';C=data\n	if A(C)<6:B.error('Insufficient data for datetime decoding');raise M('Data too short for datetime decoding')\n	D=C[0]&63;E=C[1]&63;F=C[2]&31;G=C[2]>>5&7|(C[3]&1)<<3;H=C[3]>>1&31;I=C[4]&7;J=C[4]>>3&31|(C[5]&127)<<5;K=C[0]>>6&3|(C[1]>>6&3)<<2|(C[3]>>6&3)<<4|(C[5]>>7&1)<<6\n	if not(0<=D<=59 and 0<=E<=59 and 0<=F<=23 and 0<=I<=6 and 1<=G<=12 and 1<=H<=31 and 0<=J<=4095 and 0<=K<=127):B.error(L);raise M(L)\n	return D,E,F,I,G,H,J,K\ndef A2(data,repeat=100):\n	B=F(data)\n	for D in m:\n		E=D if D==2 else K(1,k.ceil(D*4096/28672))\n		for I in C(repeat):\n			for H in C(0,A(B),3):B[H]^=E\n	return G(B)\ndef A3(data,chunk_size=4):\n	B=chunk_size;D=F()\n	for E in C(0,A(data),B):H=data[E:E+B];D.extend([A^255 for A in H])\n	return G(D)\ndef r(n):\n	if n<2:return V\n	if n==2:return U\n	if n%2==0:return V\n	for A in C(3,E(n**.5)+1,2):\n		if n%A==0:return V\n	return U\ndef Z(n):\n	A=0\n	while U:\n		if r(n-A):return n-A\n		if r(n+A):return n+A\n		A+=1\ndef quit(message=D):\n	A=message\n	if A:R(A)\n	sys.exit(1)\ndef AF(x):\n	if x<0:return 0\n	A=0\n	while x>0:x>>=1;A+=1\n	return A\ndef A4(d,n=12,repeat=1000):\n	B=(1<<n)-1;A=d\n	for F in C(repeat):\n		if A>2047:A=B\n		if A<-2047:A=0\n		D=(1<<n)/(1+k.exp(-A/512.));A=E(D);A=N(K(A,0),B)\n	return A\ndef AG(p):\n	A=o(4096);B=0\n	for D in C(-2047,2048):\n		E=A4(D)\n		for F in C(B,E+1):A[F]=D\n		B=E+1\n	A[4095]=2047;return A[p]\ndef hash(*B):C=B[0]*200002979+B[1]*30005491+(B[2]if A(B)>2 else 4294967295)*50004239+(B[3]if A(B)>3 else 4294967295)*70004807+(B[4]if A(B)>4 else 4294967295)*110002499;return C^C>>9^B[0]>>2^B[1]>>3^(B[2]if A(B)>2 else 0)>>4^(B[3]if A(B)>3 else 0)>>5^(B[4]if A(B)>4 else 0)>>6\nclass A5:\n	def __init__(A):A.compressor=D;A.PRIMES=m;A.PI_DIGITS=w;A.seed_tables=A.generate_seed_tables();A.max_intersections=28\n	def generate_seed_tables(D,num_tables=126,table_size=256,min_val=5,max_val=255,seed=42):\n		Q.seed(seed);A=[]\n		for E in C(num_tables):B=[Q.randint(min_val,max_val)for A in C(table_size)];A.append(B)\n		return A\n	def get_seed(B,table_idx,value):\n		C=table_idx\n		if 0<=C<A(B.seed_tables):return B.seed_tables[C][value%A(B.seed_tables[C])]\n		return 0\n	def binary_to_file(M,binary_data,filename):\n		D=binary_data\n		try:\n			F=E(D,2);G=(A(D)+7)//8;C=s%(G*2,F)\n			if A(C)%2!=0:C=O+C\n			I=S.unhexlify(C)\n			with J(filename,h)as K:K.write(I)\n			return U\n		except H as L:B.error(f"Error saving file: {e(L)}");return V\n	def file_to_binary(I,filename):\n		try:\n			with J(filename,i)as D:\n				C=D.read()\n				if not C:B.error('Error: Empty file');return\n				F=f(E(S.hexlify(C),16))[2:];return F.zfill(A(C)*8)\n		except H as G:B.error(f"Error reading file: {e(G)}");return\n	def calculate_frequencies(C,binary_str):\n		A={}\n		for B in binary_str:A[B]=A.get(B,0)+1\n		return A\n	def build_huffman_tree(H,frequencies):\n		B=[(B,p(symbol=A))for(A,B)in frequencies.items()];W.heapify(B)\n		while A(B)>1:C,D=W.heappop(B);E,F=W.heappop(B);G=p(left=D,right=F);W.heappush(B,(C+E,G))\n		return B[0][1]\n	def generate_huffman_codes(D,root,current_code=L,codes={}):\n		C=current_code;B=codes;A=root\n		if A.is_leaf():B[A.symbol]=C or O;return B\n		if A.left:D.generate_huffman_codes(A.left,C+O,B)\n		if A.right:D.generate_huffman_codes(A.right,C+P,B)\n		return B\n	def compress_data_huffman(B,binary_str):\n		C=binary_str\n		if not C:return L\n		D=B.calculate_frequencies(C);E=B.build_huffman_tree(D);A=B.generate_huffman_codes(E)\n		if O not in A:A[O]=O\n		if P not in A:A[P]=P\n		F=L.join(A[B]for B in C);return F\n	def decompress_data_huffman(B,compressed_str):\n		C=compressed_str\n		if not C:return L\n		F=B.calculate_frequencies(C);G=B.build_huffman_tree(F);H=B.generate_huffman_codes(G);D={B:A for(A,B)in H.items()};E=L;A=L\n		for I in C:\n			A+=I\n			if A in D:E+=D[A];A=L\n		return E\n	def compress_data_zlib(C,data_bytes):\n		try:return X.compress(data_bytes)\n		except X.error as A:B.error(f"zlib compression error: {A}");return\n	def decompress_data_zlib(C,compressed_data):\n		try:return X.decompress(compressed_data)\n		except X.error as A:B.error(f"zlib decompression error: {A}");return\n	def transform_01(A,data,repeat=100):return A2(data,repeat=repeat)\n	def reverse_transform_01(A,data,repeat=100):return A.transform_01(data,repeat=repeat)\n	def transform_03(A,data):return A3(data)\n	def reverse_transform_03(A,data):return A.transform_03(data)\n	def transform_04(E,data,repeat=100):\n		B=F(data)\n		for H in C(repeat):\n			for D in C(A(B)):B[D]=(B[D]-D%256)%256\n		return G(B)\n	def reverse_transform_04(E,data,repeat=100):\n		B=F(data)\n		for H in C(repeat):\n			for D in C(A(B)):B[D]=(B[D]+D%256)%256\n		return G(B)\n	def transform_05(H,data,shift=3):\n		E=shift;B=F(data)\n		for D in C(A(B)):B[D]=(B[D]<<E|B[D]>>8-E)&255\n		return G(B)\n	def reverse_transform_05(H,data,shift=3):\n		E=shift;B=F(data)\n		for D in C(A(B)):B[D]=(B[D]>>E|B[D]<<8-E)&255\n		return G(B)\n	def transform_06(H,data,seed=42):\n		Q.seed(seed);D=list(C(256));Q.shuffle(D);B=F(data)\n		for E in C(A(B)):B[E]=D[B[E]]\n		return G(B)\n	def reverse_transform_06(J,data,seed=42):\n		Q.seed(seed);E=list(C(256));Q.shuffle(E);H=[0]*256\n		for(B,I)in enumerate(E):H[I]=B\n		D=F(data)\n		for B in C(A(D)):D[B]=H[D[B]]\n		return G(D)\n	def transform_07(D,data,repeat=100):\n		H=data;I=F(H);L=A(D.PI_DIGITS);P=A(H)/1024;M=N(10,K(1,E(P)));B.info(f"transform_07: Using {M} cycles for {A(H)} bytes (base-256)");O=A(H)%L;D.PI_DIGITS=D.PI_DIGITS[O:]+D.PI_DIGITS[:O];Q=A(H)%256\n		for J in C(A(I)):I[J]^=Q\n		for S in C(M*repeat//10):\n			for J in C(A(I)):R=D.PI_DIGITS[J%L];I[J]^=R\n		return G(I)\n	def reverse_transform_07(D,data,repeat=100):\n		H=data;I=F(H);L=A(D.PI_DIGITS);P=A(H)/1024;M=N(10,K(1,E(P)));B.info(f"reverse_transform_07: Using {M} cycles for {A(H)} bytes (base-256)")\n		for S in C(M*repeat//10):\n			for J in C(A(I)):Q=D.PI_DIGITS[J%L];I[J]^=Q\n		R=A(H)%256\n		for J in C(A(I)):I[J]^=R\n		O=A(H)%L;D.PI_DIGITS=D.PI_DIGITS[-O:]+D.PI_DIGITS[:-O];return G(I)\n	def transform_08(D,data,repeat=100):\n		H=data;I=F(H);L=A(D.PI_DIGITS);P=A(H)/1024;M=N(10,K(1,E(P)));B.info(f"transform_08: Using {M} cycles for {A(H)} bytes (base-256)");O=A(H)%L;D.PI_DIGITS=D.PI_DIGITS[O:]+D.PI_DIGITS[:O];Q=Z(A(H)%256)\n		for J in C(A(I)):I[J]^=Q\n		for S in C(M*repeat//10):\n			for J in C(A(I)):R=D.PI_DIGITS[J%L];I[J]^=R\n		return G(I)\n	def reverse_transform_08(D,data,repeat=100):\n		H=data;I=F(H);L=A(D.PI_DIGITS);P=A(H)/1024;M=N(10,K(1,E(P)));B.info(f"reverse_transform_08: Using {M} cycles for {A(H)} bytes (base-256)")\n		for S in C(M*repeat//10):\n			for J in C(A(I)):Q=D.PI_DIGITS[J%L];I[J]^=Q\n		R=Z(A(H)%256)\n		for J in C(A(I)):I[J]^=R\n		O=A(H)%L;D.PI_DIGITS=D.PI_DIGITS[-O:]+D.PI_DIGITS[:-O];return G(I)\n	def transform_09(D,data,repeat=100):\n		L=repeat;H=data;I=F(H);M=A(D.PI_DIGITS);Q=A(H)/1024;O=N(10,K(1,E(Q)));B.info(f"transform_09: Using {O} cycles with {L} repeats for {A(H)} bytes (base-256)");P=A(H)%M;D.PI_DIGITS=D.PI_DIGITS[P:]+D.PI_DIGITS[:P];R=Z(A(H)%256);S=A(H)%A(D.seed_tables);T=D.get_seed(S,A(H))\n		for J in C(A(I)):I[J]^=R^T\n		for V in C(O*L//10):\n			for J in C(A(I)):U=D.PI_DIGITS[J%M];I[J]^=U^J%256\n		return G(I)\n	def reverse_transform_09(D,data,repeat=100):\n		L=repeat;H=data;I=F(H);M=A(D.PI_DIGITS);Q=A(H)/1024;O=N(10,K(1,E(Q)));B.info(f"reverse_transform_09: Using {O} cycles with {L} repeats for {A(H)} bytes (base-256)")\n		for V in C(O*L//10):\n			for J in C(A(I)):R=D.PI_DIGITS[J%M];I[J]^=R^J%256\n		S=Z(A(H)%256);T=A(H)%A(D.seed_tables);U=D.get_seed(T,A(H))\n		for J in C(A(I)):I[J]^=S^U\n		P=A(H)%M;D.PI_DIGITS=D.PI_DIGITS[-P:]+D.PI_DIGITS[:-P];return G(I)\n	def paq_compress(A,data):return paq.compress(data)\n	def paq_decompress(A,data):return paq.decompress(data)\n	def compress_with_best_method(C,data,filetype,input_filename):\n		P=filetype;F=data;W=x(input_filename);X=A1(W);L=[(1,C.transform_04),(2,C.transform_01),(3,C.transform_03),(5,C.transform_05),(6,C.transform_06),(7,C.transform_07),(8,C.transform_08),(9,C.transform_09)]\n		if P in[T.JPEG,T.TEXT]:L=[(7,C.transform_07),(8,C.transform_08),(9,C.transform_09)]+L\n		Y=[('paq',C.paq_compress),('zlib',C.compress_data_zlib)];I=D;J=float('inf');K=D;M=D\n		for(Q,Z)in L:\n			a=Z(F)\n			for(R,b)in Y:\n				try:\n					N=b(a)\n					if N is D:continue\n					U=A(N)\n					if U<J:J=U;I=N;K=Q;M=R\n				except H as c:B.warning(f"Compression method {R} with transform {Q} failed: {c}");continue\n		if A(F)<t:\n			d=f(E(S.hexlify(F),16))[2:].zfill(A(F)*8);V=C.compress_data_huffman(d);O=E(V,2).to_bytes((A(V)+7)//8,'big')\n			if A(O)<J:J=A(O);I=O;K=4;M='huffman'\n		if I is D:B.error('All compression methods failed.');return\n		B.info(f"Best compression method: {M}, Marker: {K} for {P.name}");return G([K])+X+I\n	def decompress_with_best_method(C,data):\n		J=data;I=b''\n		if A(J)<7:B.error('Empty or insufficient compressed data.');return I,D\n		F=J[0];R=J[1:7];K=J[7:]\n		try:T,U,V,W,X,Y,Z,a=q(R);B.info(f"Decoded datetime: {Z}-{X:02d}-{Y:02d} {V:02d}:{U:02d}:{T:02d}, Day of week: {W}, Version: {a}")\n		except M as G:B.error(f"Datetime decoding failed: {G}");return I,D\n		P={1:C.reverse_transform_04,2:C.reverse_transform_01,3:C.reverse_transform_03,5:C.reverse_transform_05,6:C.reverse_transform_06,7:C.reverse_transform_07,8:C.reverse_transform_08,9:C.reverse_transform_09}\n		if F==4:\n			b=f(E(S.hexlify(K),16))[2:].zfill(A(K)*8);Q=C.decompress_data_huffman(b)\n			if not Q:B.error('Huffman decompression failed.');return I,D\n			try:\n				c=(A(Q)+7)//8;L=s%(c*2,E(Q,2))\n				if A(L)%2!=0:L=O+L\n				return S.unhexlify(L),D\n			except H as G:B.error(f"Error converting decompressed Huffman data: {G}");return I,D\n		if F not in P:B.error(f"Unknown compression method marker: {F}");raise M(f"Unknown compression method marker: {F}")\n		try:N=C.paq_decompress(K);return P[F](N),F\n		except H as G:B.warning(f"PAQ decompression failed: {G}. Trying zlib...")\n		N=C.decompress_data_zlib(K)\n		if N is D:B.error('All decompression methods failed.');return I,D\n		return P[F](N),F\ndef A6(filename):\n	B,A=I.path.splitext(filename.lower())\n	if A==b or A==j:return T.JPEG\n	elif A==c:return T.TEXT\n	else:return T.DEFAULT\ndef A7():\n	R('PAQJP_4 Compression System with Base-10 Pi Transformation (3 digits)');R('Created by Jurijus Pacalovas.');R('Options:');R('1 - Compress file (PAQJP_4 with transformations and datetime)');R('2 - Decompress file (PAQJP_4 with transformations and datetime)');Q=A5()\n	try:\n		G=g('Enter 1 or 2: ').strip()\n		if G not in(P,'2'):B.error('Invalid choice. Exiting.');return\n	except EOFError:B.info('No input detected. Defaulting to Compress (1).');G=P\n	C=g('Input file name: ').strip();E=g('Output file name: ').strip()\n	if not I.path.isfile(C):B.error(f"Error: Input file '{C}' does not exist.");return\n	S=A6(C);B.info(f"Detected filetype: {S.name}")\n	if G==P:\n		with J(C,i)as L:K=L.read()\n		M=Q.compress_with_best_method(K,S,C)\n		if M is D:return\n		with J(E,h)as N:N.write(M)\n		O=I.path.getsize(C);F=A(M);V=F/O*100 if O>0 else 0;B.info(f"Compression successful. Output saved to {E}. Size: {F} bytes");B.info(f"Original: {O} bytes, Compressed: {F} bytes, Ratio: {V:.2f}%")\n	elif G=='2':\n		with J(C,i)as L:K=L.read()\n		try:\n			T,W=Q.decompress_with_best_method(K)\n			if T is D:return\n			U=I.path.splitext(C)[1].lower()\n			if W in[7,8,9]and not E.endswith((b,j,c)):\n				if U in[b,j]:E+=b\n				elif U==c:E+=c\n			with J(E,h)as N:N.write(T)\n			X=K[1:7];Z,a,d,o,e,f,k,p=q(X);l=Y(k,e,f,d,a,Z);y(E,l);F=I.path.getsize(C);m=I.path.getsize(E);B.info(f"Decompression successful. Output saved to {E}.");B.info(f"Compressed: {F} bytes, Decompressed: {m} bytes")\n		except H as n:B.error(f"Error during decompression: {n}")\nif __name__=='__main__':A7()\n""")
